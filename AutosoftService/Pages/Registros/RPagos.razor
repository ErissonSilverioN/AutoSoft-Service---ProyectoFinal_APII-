@page "/RPagos"
@page "/RPagos/{PagoId:int}"

@inject IToastService toast

@using AutosoftService.Model;
@using AutosoftService.BLL;

<EditForm Model="pagos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="card">

        <div class="card-header">
            <div class="text-center">
                <h3>Registro de Pagos</h3>
            </div>
        </div>

        <div class="card-body">

            <form>

                <div class="form-row">

                    <div class="col-sm-0     col-md-0     col-lg-0     col-xl-1" />


                    <div class="form-group col-sm-5     col-md-5     col-lg-3     col-xl-3     ">
                        <label>Pago ID</label>
                        <div class="input-group ">
                            <InputNumber @bind-Value="@pagos.PagoId" class="form-control" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="oi oi-magnifying-glass" />&nbsp;&nbsp;Buscar</button>
                            </div>
                        </div>
                    </div>


                    <div class="col-sm-2   col-md-2   col-lg-6  col-xl-4" />


                    <div class="form-group col-sm-5     col-md-5     col-lg-3     col-xl-3     ">
                        <label>Fecha</label>
                        <InputDate @bind-Value="@pagos.Fecha" class="form-control" />
                    </div>


                    <div class="col-sm-2   col-md-2   col-lg-0  col-xl-0" />

                    <br />
                    <div class="form-group col-sm-8     col-md-8     col-lg-8     col-xl-8    ">
                        <label><b>Clientes</b></label>
                        <InputSelect class="form-control" @bind-Value="@ClienteSelect" @onclick="LlenarComboxCliente" @onchange="LlenarComboxCliente">
                            <option value="0">---Seleccione un Cliente---</option>

                            @foreach (var item in ListaCliente)
                            {
                                <option value="@item.ClienteId">@item.Nombre</option>
                            }

                        </InputSelect>
                    </div>



                    <div class="form-group col-sm-4     col-md-4     col-lg-1    col-xl-1     ">
                        <label>Deuda</label>
                        <InputNumber @bind-Value="@deuda" class="form-control" Readonly="true" />
                    </div>

                    <div class="col-sm-2   col-md-2   col-lg-0  col-xl-0" />

                    <div class="form-group col-sm-6     col-md-6     col-lg-4     col-xl-4    ">
                        <label>Monto a pagar</label>
                        <InputNumber @bind-Value="@pagos.Monto" class="form-control" />
                        <ValidationMessage For="(() => pagos.Monto)" />

                    </div>
                </div>

            </form>

        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-warning btn-lg" @onclick="Nuevo"><span class="oi oi-file" />&nbsp;Limpiar</button>
                <button type="submit" class="btn btn-success btn-lg "><span class="oi oi-data-transfer-download"></span>&nbsp;Guardar</button>
                <button type="button" class="btn btn-danger btn-lg"><span class="oi oi-trash" />&nbsp;Eliminar</button>
            </div>
        </div>
    </div>



</EditForm>



@code{


    [Parameter]
    public int PagoId { get; set; }
    private Pagos pagos = new Pagos();


    private Clientes clientes { get; set; }
    List<Clientes> ListaCliente = new List<Clientes>();
    private string ClienteSelect { get; set; }

    private decimal deuda = 0;

    protected override void OnInitialized()
    {
        ListaCliente = ClienteBLL.GetList(e => true);
        pagos = new Pagos();
        Nuevo();

        if (PagoId != 0)
        {
            pagos.PagoId = PagoId;
            Buscar();
        }
    }


    private void Buscar()
    {
        Pagos pagosTemp = PagoBLL.Buscar(pagos.PagoId);

        if (pagosTemp != null)
        {
            Nuevo();
            pagos = pagosTemp;
            ClienteSelect = pagos.ClienteId.ToString();


        }
        else
        {
            Nuevo();
            toast.ShowError("El Pago no existe", "Fallo");

        }
    }



    private void Nuevo()
    {
        this.pagos = new Pagos();
        ClienteSelect = "0";
        deuda = 0;
    }



    private void Guardar()
    {
        var clienteTemp = ClienteBLL.Buscar(Convert.ToInt32(ClienteSelect));

        if (clienteTemp.Deuda <= 0)
        {
            toast.ShowInfo("El cliente no tiene deuda", "Info");

        }
        else

        if (pagos.Monto > clienteTemp.Deuda)
        {
            toast.ShowInfo("El pago es mayor a la Deuda");

        }
        else if (pagos.Monto <= 0)
        {
            toast.ShowInfo("El Monto debe ser mayor a 0.", "Fallo");

        }
        else if (pagos.Monto >= 999999999)
        {
            toast.ShowInfo("El monto no es valido", "Fallo");

        }
        else
        {
            if (PagoBLL.Guardar(pagos))
            {
                Nuevo();
                toast.ShowSuccess("Pago guardado correctamente", "Exito");

            }
            else
            {
                toast.ShowError("Error al guardar el Pago", "Fallo");
            }
        }

    }



    private void Eliminar()
    {
        Pagos pagoTemp = PagoBLL.Buscar(pagos.PagoId);

        if ( pagoTemp!= null)
        {
            if (PagoBLL.Eliminar(pagos.PagoId))
            {
                Nuevo();
                toast.ShowSuccess("Pago eliminado correctamente", "Exito");

            }
            else
            {
                toast.ShowError("Error al eliminar el pago", "Fallo");

            }
        }
        else
        {
            toast.ShowError("Error al eliminar el pago.", "Fallo");

        }
    }


    private void LlenarComboxCliente()
    {
        try
        {
            pagos.ClienteId = Convert.ToInt32(ClienteSelect);

            var clienteTemp = ClienteBLL.Buscar(Convert.ToInt32(ClienteSelect));

            if (clienteTemp != null)
            {
                deuda = clienteTemp.Deuda;
            }

        }
        catch (Exception)
        {
            toast.ShowError("Algo salio mal", "Error");
        }

    }







}
