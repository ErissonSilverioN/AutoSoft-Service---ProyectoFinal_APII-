@page "/Cliente"
@page "/Cliente/{ClienteId:int}"

@using Model
@using BLL

@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toast


<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card w-100">
        <div class="card-header">
            <h1>Registro de Clientes</h1>
        </div>

        @*ClientesID y boton al lado*@
        <div class="card-body">
            <form />
            <div class="form-row align-items-center">
                <div class="col">
                    <div class="form-group">
                        <label>ID</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="cliente.ClienteId" class="form-control col-4" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary" @onclick="Buscar"><i class="fa fa-search"></i> Buscar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @*Nombres*@
            <div class="form-group">
                <label>Nombre</label>
                <InputText @bind-Value="cliente.Nombre" class="form-control" />
                <ValidationMessage For="@(() => cliente.Nombre)" />
            </div>

            @*Fecha de Nacimiento*@
            <div class="form-group">
                <label>Fecha de Nacimiento</label>
                <InputDate @bind-Value="cliente.Fecha" class="form-control" />
                <ValidationMessage For="@(() => cliente.Fecha)" />
            </div>

            @*Cedula*@
            <div class="form-group">
                <label>Cédula </label>
                <InputText @bind-Value="cliente.Cedula" class="form-control" />
                <ValidationMessage For="@(() => cliente.Cedula)" />
            </div>

            @*Telefono*@
            <div class="form-group">
                <label>Teléfono </label>
                <InputText @bind-Value="cliente.Telefono" class="form-control" />
                <ValidationMessage For="@(() => cliente.Telefono)" />
            </div>

            @*Dirección*@
            <div class="form-group">
                <label>Dirección</label>
                <InputText @bind-Value="cliente.Direccion" class="form-control" />
                <ValidationMessage For="@(() => cliente.Direccion)" />
            </div>

            @*Gmail*@
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="cliente.Email" class="form-control" />
                <ValidationMessage For="@(() => cliente.Email)" />
            </div>

        </div>

        @*Botones*@
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="fa fa-plus"></i> Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success"><i class="fa fa-save"></i> Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="fa fa-trash"></i> Eliminar</button>
            </div>
        </div>

    </div>
</EditForm>




@code{

    [Parameter]
    public int ClienteId { get; set; }

    Clientes cliente = new Clientes();

    private Usuarios Usuario = new Usuarios();

    public bool paso { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        if (ClienteId > 0)
        {
            var Auxclientes = ClienteBLL.Buscar(ClienteId);
            if (Auxclientes != null)
                this.cliente = Auxclientes;
            else
                toast.ShowWarning("No encontrado.");
        }


    }

    private void Nuevo()
    {
        this.cliente = new Clientes();

    }

    private void Buscar()
    {
        if (cliente.ClienteId > 0)
        {
            var encontrado = ClienteBLL.Buscar(cliente.ClienteId);

            if (encontrado != null)
            {
                this.cliente = encontrado;
            }
            else
            {
                toast.ShowWarning("No encontrado");


            }
        }
    }

    private void Guardar()
    {
        bool guardo = ClienteBLL.Guardar(cliente);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");

        }
        else
        {
            toast.ShowError("No fue posible guardar");

        }
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = ClienteBLL.Eliminar(cliente.ClienteId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");

        }
        else
        {
            toast.ShowError("No fue posible eliminar");

        }
    }


}