@page "/CPagos"

@using AutosoftService.Model;
@using AutosoftService.DAL;
@using AutosoftService.BLL;

@inject IToastService toast
<EditForm Model="listadoPagos">

    <div class="card">


        <div class="card-header">
            <center>
                <h1>Consulta de Pagos</h1>
            </center>
        </div>


        <div class="card-body">

            <form>

                <div class="form-row">


                    <div class="col-sm-0     col-md-0     col-lg-1     col-xl-2" />

                    <div class="form-inline DivConsulta col-sm-12     col-md-6     col-lg-5     col-xl-4">
                        <label for="Filtro" class="LabelConsulta     col-sm-3     col-md-2">Filtro: </label>
                        <select class="form-control     col-sm-8     col-md-9" @bind="Filtro">
                            <option value="0">Todo</option>
                            <option value="1">Codigo</option>
                            <option value="2">Cliente</option>
                            <option value="3">Monto</option>
                        </select>
                    </div>



                    <div class="form-inline DivConsulta col-sm-12     col-md-6     col-lg-5     col-xl-4">
                        <label for="Criterio" class="LabelConsulta     col-sm-3      col-md-2">Criterio: </label>
                        <InputText @bind-Value="@Criterio" class="form-control     col-sm-8     col-md-9" placeholder="Criterio" />

                    </div>

                    <div class="col-sm-0     col-md-0     col-lg-1     col-xl-2" />

                    <br />

                    +
                    <div class="DivConsulta text-center     col-12">
                        <input class="ml-1" type="checkbox" @bind-value="BuscarPorFecha" style="margin-top:15px">&nbsp;&nbsp;Filtrar por Fecha
                    </div>


                    <div class="col-sm-0     col-md-0     col-lg-1     col-xl-2" />


                    <div class="form-inline DivConsulta col-sm-12     col-md-6     col-lg-5     col-xl-4">
                        <label for="Desde" class="LabelConsulta     col-sm-3     col-md-2">Desde: </label>
                        <InputDate @bind-Value="@Desde" class="form-control     col-sm-8     col-md-9" />
                    </div>



                    <div class="form-inline DivConsulta col-sm-12     col-md-6     col-lg-5     col-xl-4">
                        <label for="Hasta" class="LabelConsulta     col-sm-3     col-md-2">Hasta: </label>
                        <InputDate @bind-Value="@Hasta" class="form-control     col-sm-8     col-md-9" />
                    </div>


                    <div class="DivConsulta text-center     container     col-sm-12     col-md-12          col-lg-1     col-xl-1">
                        <button type="button" class="btn btn-primary" @onclick="Buscar">@*<span class="oi oi-magnifying-glass" />*@ Buscar</button>
                    </div>

                    <div class="col-sm-0     col-md-0     col-lg-1     col-xl-2" />

                    <table class="table" style="margin-top: 20px">
                        <thead class="thead-light">
                            <tr>
                                <th>Codigo</th>
                                <th>Fecha</th>
                                <th>Cliente</th>
                                <th>Monto</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (ListadoPaginado.Count == 0)
                            {
                                <tr>
                                    <th colspan="12" style="color:black; text-align: center">"No hay datos que mostrar"</th>
                                </tr>
                            }
                            else
                            {

                                @foreach (var item in ListadoPaginado)
                                {
                                    <tr>
                                        <th>@item.PagoId</th>
                                        <th>@item.Fecha.ToString("dd/MM/yyyy")</th>
                                        <th>@item.ClienteId</th>
                                        <th>@item.Monto.ToString("N2")</th>
                                        <th><a class="btn btn-light" href="rPagos/@item.PagoId">Ver</a></th>
                                    </tr>
                                }
                            }
                        </tbody>

                    </table>

                </div>
                <div class="card-footer text-center">
                    <button class="btn btn-outline-success" data-toggle="modal" @onclick="PDF" data-target="#myModals"><i class="oi oi-print"></i> Generar Reporte</button>
                </div>
                <div class="form-inline justify-content-end">
                    <label>Total:&nbsp;</label>
                    <InputNumber @bind-Value="@Total" class="form-control" disabled />
                </div>

            </form>

        </div>

        <div class="card-footer">
            <div class="form-row col-12 justify-content-center">
                <nav aria-label="Page navigation example">
                    <ul class="pagination">
                        <li class="page-item">
                            <a class="page-link" @onclick="PaginaAnterior">
                                <span class="oi oi-media-skip-backward"></span>
                            </a>
                        </li>

                        @for (int i = 1; i <= Paginas; i++)
                        {
                            <li class="page-item disabled"><a class="page-link">@i</a></li>
                        }

                        <li class="page-item">
                            <a class="page-link" @onclick="PaginaSiguiente">
                                <span class="oi oi-media-skip-forward"></span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>


    </div>
</EditForm>

<div class="modal fade" id="myModals" tabindex="-1" role="dialog" aria-labelledby="myModalsLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content m-md-auto">
            <div class="modal-header">
                <button type="button" class="close text-danger" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title"></h4>
            </div>
            <div class="modal-body">
                <div style="text-align: center;">
                    <iframe src="@pdfContent" style="width:950px; height:600px;" frameborder="0"></iframe>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {



    DateTime Desde;
    DateTime Hasta;

    string Filtro;
    string Criterio;

    bool BuscarPorFecha;
    decimal Total = 0;

    Clientes clientes = new Clientes();

    public List<Pagos> listadoPagos = new List<Pagos>();

    List<Pagos> Listado { get; set; }
    List<Pagos> ListadoPaginado { get; set; }

    double Paginas = 0;
    double Elementos = 0;
    int PaginaActual = 0;

    Contexto db = new Contexto();
    Paginacion paginacion = new Paginacion();

    public byte[] Data { get; set; }
    public string pdfContent { get; set; }

    List<Pagos> listaTemp = new List<Pagos>();

    protected override void OnInitialized()
    {
        Filtro = "0";
        Criterio = string.Empty;
        Desde = DateTime.Now;
        Hasta = DateTime.Now;
        BuscarPorFecha = false;
        LlenarLista();
    }


    private void PDF()
    {
        AutosoftService.Pages.Reporte.ReportePago cobros = new Reporte.ReportePago();

        Data = cobros.Reporte();

        pdfContent = "data:application/pdf;base64,";
        pdfContent += System.Convert.ToBase64String(Data);
    }

    private void LlenarLista()
    {
        listadoPagos = PagoBLL.GetList(e => true);
        Listado = new List<Pagos>();
        foreach (var item in listadoPagos)
        {
            Pagos pagos = new Pagos();
            pagos.PagoId = item.PagoId;
            clientes = ClienteBLL.Buscar(item.ClienteId);
            pagos.Fecha = item.Fecha;
            pagos.ClienteId = item.ClienteId;
            pagos.Monto = item.Monto;


            Listado.Add(pagos);
        }

        CagarTotal();
        IniciarPaginacion();
    }

    public void IniciarPaginacion()
    {
        PaginaActual = 1;
        Elementos = Listado.Count();
        Paginas = Math.Ceiling(Elementos / paginacion.Mostrar);
        ListadoPaginado = Listado.Take(paginacion.Mostrar).ToList();
    }

    private void PaginaSiguiente()
    {
        if (PaginaActual < Paginas)
        {
            PaginaActual++;
            ListadoPaginado = Listado
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
    }

    private void PaginaAnterior()
    {
        if (PaginaActual > 1)
        {
            PaginaActual--;
            ListadoPaginado = Listado
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
    }

    public void FiltrarPorLaFecha()
    {
        if (Filtro == "0")
            listaTemp = Listado;

        if (BuscarPorFecha == true && listaTemp.Count > 0)
        {
            Listado = new List<Pagos>();
            foreach (var item in listaTemp)
            {
                if (item.Fecha.Date >= Desde.Date && item.Fecha.Date <= Hasta.Date)
                {
                    Listado.Add(item);
                }
            }
            BuscarPorFecha = false;
        }
        else
        {
            Listado = new List<Pagos>();
            Listado = listaTemp;
        }

        CagarTotal();
        IniciarPaginacion();
    }

    public void CagarTotal()
    {
        Total = 0;
        if (Listado != null)
            foreach (var item in Listado)
            {
                Total += item.Monto;
            }
    }



    private void Buscar()
    {
        if (Filtro == "0")
        {
            LlenarLista();
            FiltrarPorLaFecha();
        }
        else
        {
            if (Criterio == "")
            {
                toast.ShowInfo("Agregue el criterio de busqueda.");
            }
            else
            {
                LlenarLista();
                listaTemp = Listado;

                switch (Filtro)
                {
                    case "0":
                        listadoPagos = PagoBLL.GetList(e => true);
                        break;

                    case "1":
                        listaTemp = new List<Pagos>();
                        foreach (var item in listadoPagos)
                        {
                            if (Convert.ToString(item.PagoId).Contains(Criterio))
                            {
                                Pagos pagos = new Pagos();
                                pagos.PagoId = item.PagoId;
                                clientes = ClienteBLL.Buscar(item.ClienteId);
                                pagos.ClienteId = Convert.ToInt32(clientes.ClienteId);
                                pagos.Fecha = item.Fecha;
                                pagos.Monto = item.Monto;

                                listaTemp.Add(pagos);
                            }
                        }
                        break;

                    case "2":
                        listaTemp = new List<Pagos>();
                        foreach (var item in listadoPagos)
                        {
                            clientes = ClienteBLL.Buscar(item.ClienteId);
                            if (clientes.Nombre.Contains(Criterio))
                            {
                                Pagos pagos = new Pagos();
                                pagos.PagoId = item.PagoId;
                                pagos.Fecha = item.Fecha;
                                clientes = ClienteBLL.Buscar(item.ClienteId);
                                pagos.ClienteId = clientes.ClienteId;
                                pagos.Monto = item.Monto;

                                listaTemp.Add(pagos);
                            }
                        }
                        break;

                    case "3":
                        listadoPagos = new List<Pagos>();
                        foreach (var item in listadoPagos)
                        {
                            if (Convert.ToString(item.Monto).Contains(Criterio))
                            {
                                Pagos pagos = new Pagos();
                                pagos.PagoId = item.PagoId;
                                pagos.Fecha = item.Fecha;
                                clientes = ClienteBLL.Buscar(item.ClienteId);
                                pagos.ClienteId = clientes.ClienteId;
                                pagos.Monto = item.Monto;

                                listaTemp.Add(pagos);
                            }
                        }
                        break;
                }

                FiltrarPorLaFecha();
            }
        }
    }

}
