@page "/CProveedores"

@using BLL
@using Model

@inject IToastService toast
<EditForm Model="listapaginada ">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header" style="        background-color: #6378F0
">
            <h3>Consultas De Proveedores</h3>
        </div>

        <div class="card-body">
            <div class="input-group mb-4">
                <div class="input-group">

                    <label for="filtro">Filtro: </label>
                    <select class="form-control ml-3 mr-3" @bind="Filtro">
                        <option value="" disabled selected>Seleccione un filtro</option>
                        <option value="Todo">Todo</option>
                        <option value="ID">ID</option>
                        <option value="Nombre">Nombre</option>
                        <option value="RNC">Rnc</option>
                    </select>

                    <label for="criterio ml-3 mr-3"> Criterio: </label>
                    <input type="search" class="form-control ml-3 mr-3" @bind-value="Criterio" />

                    <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar </button>
                </div>
            </div>

            <table class=" table mb-3 mt-3" id="example">
                <thead class="thead-light">
                    <tr>
                        <th>ID</th>
                        <th style=" width:auto">Nombre</th>
                        <th style=" width:auto">Rnc</th>
                        <th style=" width:auto">Telefono</th>
                        <th style=" width:auto">Direccion</th>
                        <th style=" width:auto">Email</th>
                        <th style=" width:auto">Fecha</th>
                        <th style=" width:auto">Cantidad Pedidos </th>

                    </tr>
                </thead>
                <tbody>

                    @if (listapaginada.Count == 0)
                    {
                        toast.ShowWarning("No hay datos");
                    }
                    else
                    {

                        @foreach (var item in listapaginada)
                        {
                            <tr class="table-striped">
                                <td style=" width:auto">@item.ProveedorId</td>
                                <td style=" width:auto">@item.Nombre</td>
                                <td style=" width:auto">@item.RNC</td>
                                <td style=" width:auto">@item.Telefono</td>
                                <td style=" width:auto">@item.Direccion</td>
                                <td style=" width:auto">@item.Email</td>
                                <td>@item.Fecha</td>
                                <td style=" width:auto">@item.CantidadPedidos</td>
                            </tr>
                        }
                    }


                </tbody>
            </table>
            <div class="form-row col-12 justify-content-center">
                <nav>
                    <ul class="pagination">
                        <li class="page-item bt">
                            <a class="page-link" @onclick="PaginaAnterior">
                                <span class="oi oi-media-skip-backward "></span>
                            </a>
                        </li>

                        @for (int i = 1; i <= Paginas; i++)
                        {
                            <li class=" @(PaginaActual == i ? "text-danger" : "page-item")" @onclick="Mover"> <a class="page-link disabled">@i</a></li>

                        }

                        <li class="page-item">
                            <a class="page-link" @onclick="PaginaSiguiente">
                                <span class="oi oi-media-skip-forward "></span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>

    </div>

</EditForm>


@code {

    private List<Proveedores> lista { get; set; }
    private List<Proveedores> listapaginada { get; set; }
    Paginacion paginacion = new Paginacion();

    private string Filtro { get; set; }
    private string Criterio { get; set; }

    double Paginas = 0;
    double Elementos = 0;
    int PaginaActual = 0;


    ProveedorBLL proveedorBLL = new ProveedorBLL();



    protected override void OnInitialized()
    {
        lista = ProveedorBLL.GetList(C => true);
        Filtro = "Todo";
        IniciarPaginacion();
    }



    public void IniciarPaginacion()
    {
        PaginaActual = 1;
        Elementos = lista.Count();
        Paginas = Math.Ceiling(Elementos / paginacion.Mostrar);
        listapaginada = lista.Take(paginacion.Mostrar).ToList();
    }

    private void PaginaSiguiente()
    {
        if (PaginaActual < Paginas)
        {
            PaginaActual++;
            listapaginada = lista
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
    }

    private void Mover()
    {
        if (PaginaActual < Paginas)
        {
            PaginaActual++;
            listapaginada = lista
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
        else if (PaginaActual > 1)
        {
            PaginaActual--;
            listapaginada = lista
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
    }


    private void PaginaAnterior()
    {
        if (PaginaActual > 1)
        {
            PaginaActual--;
            listapaginada = lista
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
    }




    private void Buscar()
    {
        try
        {
            if (Filtro == null)
            {
                toast.ShowWarning("Selecciones un filtro");
            }
            else
            {
                if (Filtro != null)
                {

                    switch (Filtro)
                    {
                        case "Todo":
                            lista = ProveedorBLL.GetList(e => true);

                            break;
                        case "Id":
                            lista = ProveedorBLL.GetList(e => e.ProveedorId == Convert.ToInt32(Criterio));
                            break;
                        case "Nombre":
                            lista = ProveedorBLL.GetList(e => e.Nombre == Criterio);
                            break;
                        case "Rnc":
                            lista = ProveedorBLL.GetList(e => e.RNC == Criterio);
                            break;

                    }
                }
                else
                {
                    toast.ShowWarning("debes de insertar un dato al criterio");
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
}