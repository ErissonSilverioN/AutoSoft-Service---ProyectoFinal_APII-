#pragma checksum "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\Pages\Registros\RFacturas.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d8947ea8f3e4c735bcfe7c8183f80e892c18cbaa"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace AutosoftService.Pages.Registros
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\_Imports.razor"
using AutosoftService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\_Imports.razor"
using AutosoftService.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\Pages\Registros\RFacturas.razor"
using AutosoftService.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\Pages\Registros\RFacturas.razor"
using AutosoftService.BLL;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/RFacturas")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/RFacturas/{FacturaId:int}")]
    public partial class RFacturas : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 252 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal2\AutosoftService\Pages\Registros\RFacturas.razor"
       

    [Parameter]
    public int FacturaId { get; set; }
    private Facturas facturas = new Facturas();


    private Articulos articulos { get; set; }
    private List<Articulos> ListaArticulo = new List<Articulos>();
    private string ArticuloSelect { get; set; }


    Clientes clientes = new Clientes();
    private List<Clientes> ListaCliente = new List<Clientes>();
    private string ClienteSelect { get; set; }

    Vehiculos vehiculos = new Vehiculos();
    private List<Vehiculos> ListaVehiculos = new List<Vehiculos>();
    private string VehiculosSelect { get; set; }


    private int cantidad = 0;
    private decimal precio = 0;
    private int importe = 0;
    private int artDisponible = 0;

    //ArticuloBLL articuloBLL = new ArticuloBLL();


    protected override void OnInitialized()
    {

        ListaCliente = BLL.ClienteBLL.GetList(e => true);
        ListaVehiculos = BLL.VehiculoBLL.GetList(e => true);
        ListaArticulo = ArticuloBLL.GetList(e => true);
        facturas = new Facturas();
        clientes = new Clientes();
        articulos = new Articulos();
        vehiculos = new Vehiculos();

        Nuevo();
        Buscar();

        base.OnInitialized();
    }


    private void Buscar()
    {

        var facturasTemp = FacturaBLL.Buscar(facturas.FacturaId);

        if (facturasTemp != null)
        {
            Nuevo();
            facturas = facturasTemp;
            ArticuloSelect = Convert.ToString(facturas.ArticuloId);
            toas.ShowSuccess("Factura encontrada.", "Exito");
        }
        else
        {
            facturas = new Facturas();
            toas.ShowError("Factura no existe", "Fallo");
        }

    }




    private void Nuevo()
    {
        this.facturas = new Facturas();
    }




    private void Guardar()
    {

        CalcularImporte();
        if (ClienteSelect == null)
        {
            toas.ShowInfo("debe seleccionar un Cliente", "Info");
        }
        else
        {
            facturas.ClienteId = Convert.ToInt32(ClienteSelect);

            if (facturas.Factura_Detalle.Count == 0)
            {
                toas.ShowInfo("Debes agregar un Articulo al detalle", "Info");
            }
            else
            {
                if (FacturaBLL.Guardar(facturas))
                {
                    Nuevo();
                    toas.ShowSuccess("Factura Guardada", "Exito");
                }
                else
                {
                    toas.ShowError("Error al guardar Factura", "Fallo");
                }
            }
        }
    }


    private void Eliminar()
    {
        bool paso;

        paso = FacturaBLL.Eliminar(facturas.FacturaId);

        if (paso)
        {
            Nuevo();
            toas.ShowWarning("ELIMINADO");
        }
        else
        {
            toas.ShowError("NO SE PUDO ELIMINAR");
        }
    }


    private void Agregar()
    {
        if (ArticuloSelect == null)
        {
            toas.ShowWarning("Debe seleccionar un Articulo");
        }
        else
        {
            if (cantidad <= 0)
            {
                toas.ShowWarning("La cantidad debe ser mayor a 0");
            }
            else
                if (cantidad >= 999999)
            {
                toas.ShowWarning("La cantidad esta fuera de rango");
                return;
            }
            else
            {
                if (cantidad > articulos.Existencia)
                {
                    toas.ShowWarning("Solo quedan " + articulos.Existencia + " unidades de este articulo");
                }
                else
                {

                    facturas.Factura_Detalle.Add(new FacturaD()
                    {
                        FacturaId = facturas.FacturaId,
                        ArticuloId = articulos.ArticuloId,
                        Descripcion = articulos.Descripcion,
                        Cantidad = cantidad,
                        Precio = precio,
                        Importe = (cantidad * precio)
                    });
                    articulos = new Articulos();

                    Total();

                    ArticuloSelect = "0";
                    cantidad = 0;
                }
            }

        }
    }





    private void Remover(FacturaD Detalle)
    {
        facturas.Factura_Detalle.Remove(Detalle);
        Total();
    }


    private void LlenaComboxCliente()
    {
        try
        {
            facturas.ClienteId = Convert.ToInt32(ClienteSelect);
        }
        catch (Exception)
        {

        }
    }


    private void LlenaComboxVehiculo()
    {
        try
        {
            facturas.VehiculoId = Convert.ToInt32(VehiculosSelect);
        }
        catch (Exception)
        {

        }
    }



    private void LlenaComboxArticulo()
    {
        try
        {
            articulos = ArticuloBLL.Buscar(Convert.ToInt32(ArticuloSelect));
            precio = articulos.Precio;
        }
        catch (Exception ex)
        {
            //	mensaje = ex.ToString();
        }

    }


    private void Subtotal()
    {
        decimal Result = 0;

        foreach (var item in facturas.Factura_Detalle)
        {
            Result += item.Importe;
        }

        facturas.SubTotal = Result;
    }



    private void Itbis()
    {
        decimal Result = 0;
        decimal Porcentaje = (decimal)0.18;

        foreach (var item in facturas.Factura_Detalle)
        {
            Result += facturas.SubTotal * Porcentaje;
        }

        facturas.Itbis = Result;
    }



    private void Total()
    {
        decimal Result = 0;

        foreach (var item in facturas.Factura_Detalle)
        {
            Result += facturas.SubTotal + facturas.Itbis;
        }

        facturas.Total = Result;
    }






    private void CalcularImporte()
    {
        if (facturas != null)
        {
            importe = Convert.ToInt32(precio) * cantidad;
        }
        else
        {
            toas.ShowError("Error al Calcular");
        }
    }




#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toas { get; set; }
    }
}
#pragma warning restore 1591
