#pragma checksum "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\Pages\Consultas\CArticulos.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "48d34b1561287c4037e03c849d582406651c1563"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace AutosoftService.Pages.Consultas
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\_Imports.razor"
using AutosoftService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\_Imports.razor"
using AutosoftService.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\Pages\Consultas\CArticulos.razor"
using AutosoftService.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\Pages\Consultas\CArticulos.razor"
using AutosoftService.BLL;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\Pages\Consultas\CArticulos.razor"
using AutosoftService.DAL;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/CArticulos")]
    public partial class CArticulos : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 160 "C:\Users\PANDA\Source\Repos\AutosoftService-ProyectoFinal3\AutosoftService\Pages\Consultas\CArticulos.razor"
       


    List<Articulos> Lista { get; set; }
    List<Articulos> Paginado { get; set; }

    string Filtro;
    string Criterio;
    DateTime Desde;
    DateTime Hasta;
    bool BuscarPorFecha;
    string Mensaje;

    public List<Articulos> ListadoArticulos = new List<Articulos>();
    Proveedores proveedores = new Proveedores();


    double Paginas = 0;
    double Elementos = 0;
    int PaginaActual = 0;


    Contexto db = new Contexto();
    Paginacion paginacion = new Paginacion();

    List<Articulos> ListaTemp = new List<Articulos>();


    protected override void OnInitialized()
    {
        Filtro = "0";
        Criterio = string.Empty;
        Desde = DateTime.Now;
        Hasta = DateTime.Now;
        BuscarPorFecha = false;
        Mensaje = string.Empty;
        CargarLista();
    }


    ArticuloBLL articuloBLL = new ArticuloBLL();
    private void CargarLista()
    {
        ListadoArticulos = ArticuloBLL.GetList(e => true);
        Lista = new List<Articulos>();
        foreach (var item in ListadoArticulos)
        {
            Articulos p = new Articulos();
            p.ArticuloId = item.ArticuloId;
            p.Descripcion = item.Descripcion;
            p.Fecha = item.Fecha;
            p.Categoria = item.Categoria;
            p.ProveedorId = item.ProveedorId;
            p.Precio = item.Precio;
            p.Existencia = item.Existencia;

            Lista.Add(p);
        }

        IniciarPaginacion();
    }


    public void IniciarPaginacion()
    {
        PaginaActual = 1;
        Elementos = Lista.Count();
        Paginas = Math.Ceiling(Elementos / paginacion.Mostrar);
        Paginado = Lista.Take(paginacion.Mostrar).ToList();
    }


    private void PaginaSiguiente()
    {
        if (PaginaActual < Paginas)
        {
            PaginaActual++;
            Paginado = Lista
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
    }

    private void PaginaAnterior()
    {
        if (PaginaActual > 1)
        {
            PaginaActual--;
            Paginado = Lista
                .Skip((PaginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
    }


    public void FiltrarPorLaFecha()
    {
        if (Filtro == "0")
            ListaTemp = Lista;

        if (BuscarPorFecha == true && ListaTemp.Count > 0)
        {
            Lista = new List<Articulos>();
            foreach (var item in ListaTemp)
            {
                if (item.Fecha.Date >= Desde.Date && item.Fecha.Date <= Hasta.Date)
                {
                    Lista.Add(item);
                }
            }
            BuscarPorFecha = false;
        }
        else
        {
            Lista = new List<Articulos>();
            Lista = ListaTemp;
        }
        IniciarPaginacion();
    }



    private void Buscar()
    {
        if (Filtro == "0")
        {
            CargarLista();
            FiltrarPorLaFecha();
        }
        else
        {
            if (Criterio == "")
            {
                Mensaje = "Agregue el criterio de busqueda.";
            }
            else
            {
                CargarLista();
                List<Articulos> ListadoTemp = Lista;
                Mensaje = string.Empty;
                switch (Filtro)
                {
                    case "0":
                        ListadoArticulos = ArticuloBLL.GetList(e => true);
                        break;

                    case "1":
                        ListadoTemp = new List<Articulos>();
                        foreach (var item in ListadoArticulos)
                        {
                            if (Convert.ToString(item.ArticuloId).Contains(Criterio))
                            {
                                Articulos p = new Articulos();
                                p.ArticuloId = item.ArticuloId;
                                p.Descripcion = item.Descripcion;
                                p.Fecha = item.Fecha;
                                p.Categoria = item.Categoria;

                                p.ProveedorId = item.ProveedorId;
                                p.Precio = item.Precio;
                                p.Existencia = item.Existencia;

                                ListadoTemp.Add(p);
                            }
                        }
                        break;


                    case "2":
                        ListadoTemp = new List<Articulos>();
                        foreach (var item in ListadoArticulos)
                        {
                            if (item.Descripcion.Contains(Criterio))
                            {
                                Articulos p = new Articulos();
                                p.ArticuloId = item.ArticuloId;
                                p.Descripcion = item.Descripcion;
                                p.Fecha = item.Fecha;
                                p.Categoria = item.Categoria;

                                p.ProveedorId = item.ProveedorId;
                                p.Precio = item.Precio;
                                p.Existencia = item.Existencia;

                                ListadoTemp.Add(p);
                            }
                        }
                        break;

                        //    case "3":
                        //        ListadoTemp = new List<Articulos>();
                        //        foreach (var item in ListadoArticulos)
                        //        {
                        //            Articulos p = new Articulos();
                        //            p.ArticuloId = item.ArticuloId;
                        //            p.Descripcion = item.Descripcion;
                        //            p.Fecha = item.Fecha;
                        //            p.Categoria = item.Categoria;

                        //            p.ProveedorId = item.ProveedorId;
                        //            p.Precio = item.Precio;
                        //            p.Existencia = item.Existencia;

                        //            ListadoTemp.Add(p);
                        //        }
                        //}
                        //break;




                }
                if (BuscarPorFecha == true)
                {
                    Lista = new List<Articulos>();
                    foreach (var item in ListaTemp)
                    {
                        if (item.Fecha.Date >= Desde.Date && item.Fecha.Date <= Hasta.Date)
                        {
                            Lista.Add(item);
                        }
                    }
                    BuscarPorFecha = false;
                }
                else
                {
                    Lista = new List<Articulos>();
                    Lista = ListaTemp;
                }
            }
        }
    }




#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
